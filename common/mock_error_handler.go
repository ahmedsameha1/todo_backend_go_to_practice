// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ahmedsameha1/todo_backend_go_to_practice/common (interfaces: ErrorHandler)

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// HandleAppError mocks base method.
func (m *MockErrorHandler) HandleAppError(arg0 *gin.Context, arg1 error, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleAppError", arg0, arg1, arg2)
}

// HandleAppError indicates an expected call of HandleAppError.
func (mr *MockErrorHandlerMockRecorder) HandleAppError(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAppError", reflect.TypeOf((*MockErrorHandler)(nil).HandleAppError), arg0, arg1, arg2)
}
